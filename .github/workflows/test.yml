name: Test rules_emscripten
on:
  workflow_call:
    inputs:
      config:
        required: true
        type: string # must be one of ci/nightly
jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: set-matrix
        run: |
          echo ::set-output name=matrix::$(jq -c '.test.${{ inputs.config }}' .github/matrix_configs.json)
  test:
    name: Run tests
    needs: matrix-prep
    strategy:
      matrix: ${{ fromJson(needs.matrix-prep.outputs.matrix )}}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11

      - name: Mount emscripten cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/emscripten
          key: ${{ runner.os }}-${{ matrix.folder }}-emscripten

      - name: Static analysis
        env:
          # Bazelisk will download bazel to here, ensure it is cached between runs.
          XDG_CACHE_HOME: ~/.cache/bazel-repo
        working-directory: ${{ matrix.folder }}
        run: |
          UNTAGGED_TESTS=$(bazel query 'tests(//...) except attr(tags, L0, tests(//...)) except attr(tags, L1, tests(//...)) except attr(tags, L2, tests(//...)) except attr(tags, L3, tests(//...)) except attr(tags, Nightly, tests(//...)) except attr(tags, manual, tests(//...))')
          if [ -n "${UNTAGGED_TESTS}" ]; then
            echo "ERROR: Following Bazel tests are untagged: ${UNTAGGED_TESTS}" 1>&2
            exit 1
          fi

          BUILD_FILES=$(find . -name "BUILD")
          if [ -n "${BUILD_FILES}" ]; then
            echo "ERROR: Following BUILD files are named BUILD not BUILD.bazel: ${BUILD_FILES}" 1>&2
            exit 1
          fi
        shell: bash

      - name: bazel test //...
        env:
          # Bazelisk will download bazel to here, ensure it is cached between runs.
          XDG_CACHE_HOME: ~/.cache/bazel-repo
        working-directory: ${{ matrix.folder }}
        run: bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc test //...



  # build:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest]
  #       folder:
  #         - "."
  #         - "e2e/emsdk-3.1.1"
  #         - "e2e/host_sdk"

  #   steps:
  #     - name: Checkout repository and submodules
  #       uses: actions/checkout@v3

  #     - name: Setup Emscripten
  #       uses: mymindstorm/setup-emsdk@v11

  #     - name: Check source code
  #       env:
  #         # Bazelisk will download bazel to here, ensure it is cached between runs.
  #         XDG_CACHE_HOME: ~/.cache/bazel-repo
  #       working-directory: ${{ matrix.folder }}
  #       run: |
  #         UNTAGGED_TESTS=$(bazel query 'tests(//...) except attr(tags, L0, tests(//...)) except attr(tags, L1, tests(//...)) except attr(tags, L2, tests(//...)) except attr(tags, L3, tests(//...)) except attr(tags, Nightly, tests(//...)) except attr(tags, manual, tests(//...))')
  #         if [ -n "${UNTAGGED_TESTS}" ]; then
  #           echo "ERROR: Following Bazel tests are untagged: ${UNTAGGED_TESTS}" 1>&2
  #           exit 1
  #         fi

  #         BUILD_FILES=$(find . -name "BUILD")
  #         if [ -n "${BUILD_FILES}" ]; then
  #           echo "ERROR: Following BUILD files are named BUILD not BUILD.bazel: ${BUILD_FILES}" 1>&2
  #           exit 1
  #         fi
  #       shell: bash

  #     - name: bazel test //... (non-Windows)
  #       env:
  #         # Bazelisk will download bazel to here, ensure it is cached between runs.
  #         XDG_CACHE_HOME: ~/.cache/bazel-repo
  #       working-directory: ${{ matrix.folder }}
  #       if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
  #       run: bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc test //...

  #     - name: bazel test //... (Windows)
  #       env:
  #         # Bazelisk will download bazel to here, ensure it is cached between runs.
  #         XDG_CACHE_HOME: ~/.cache/bazel-repo
  #       working-directory: ${{ matrix.folder }}
  #       if: contains(matrix.os, 'windows')
  #       run: bazel --bazelrc=%GITHUB_WORKSPACE%\.github\workflows\ci.bazelrc --bazelrc=.bazelrc test //...
  #       shell: cmd
